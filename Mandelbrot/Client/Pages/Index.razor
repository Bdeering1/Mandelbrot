@page "/"

@using Mandelbrot.Client.ApiClients;
@using Mandelbrot.Shared.DTOs;

@if (dto is null || String.IsNullOrWhiteSpace(dto.Image))
{
    <p>No data...</p>
}
else
{
    <div style="height:100%; display: flex; justify-content: center; align-items: center;">
        <img src=@($"data:image/jpeg;base64, {dto.Image}") />
    </div>

    <MudPaper Class="absolute px-12 py-8 ma-5"
              Style="background: var(--mud-palette-primary);
                    color: var(--mud-palette-primary-text);
                    right: 0;
                    bottom: 0;">
        <MudText><b>X</b> @($"{dto.PositionX:0.00###}") <b>Y</b> @($"{dto.PositionX:0.00###}")</MudText>
        <MudText><b>Zoom</b> @($"{dto.Zoom:0.0}")</MudText>
        <MudText>Change position & zoom</MudText>
        <MudTextField @bind-Value="@newZoom" T="int" Label="Zoom" Variant="Variant.Text" />
        <MudTextField @bind-Value="@newPosX" T="double" Label="X Value" Variant="Variant.Text" />
        <MudTextField @bind-Value="@newPosY" T="double" Label="Y Value" Variant="Variant.Text" />
        <MudButton Disabled="@generating" OnClick="regenerateSet" Variant="Variant.Filled" Color="Color.Secondary">
            @if(generating) {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Generating...</MudText>
            } else {
                <MudText>Generate</MudText>
            }
        </MudButton>
        @*<MudText><b>Precision</b> @dto.Precision</MudText>
        <MudText><b>Max Iterations</b> @dto.MaxIterations</MudText>*@
    </MudPaper>
}

@code {
    [Inject] ApiClient apiClient { get; set; }
    [Inject] UpdateClient updateClient { get; set; }

    private ImageDto dto;
    private bool firstReceived = true;

    int newZoom = 1;
    double newPosX = 0;
    double newPosY = 0;
    bool generating = false;

    protected override async Task OnInitializedAsync()
    {
        updateClient.OnImageReceived += async (dto) =>
        {
            Console.WriteLine($"Image received");
            this.dto = dto;
            StateHasChanged();

            if (firstReceived)
            {
                firstReceived = false;
                await apiClient.SendImageRequest();
            }
        };

        dto = await apiClient.SendImageRequestHttp();
    }

    async void regenerateSet()
    {
        generating = true;
        string c = $"{{zoom: {newZoom}, newPosX: {newPosX}, newPosY: {newPosY}";
        await apiClient.setVars(c);
        dto = await apiClient.SendImageRequestHttp();
        generating = false;
    }
}