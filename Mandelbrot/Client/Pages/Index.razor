@page "/"

@using Mandelbrot.Client.ApiClients;
@using Mandelbrot.Shared.DTOs;

@if (dto is null || String.IsNullOrWhiteSpace(dto.Image))
{
    <p>No data...</p>
}
else
{
    <div style="height:100%; display: flex; justify-content: center; align-items: center;">
        <img src=@($"data:image/jpeg;base64, {dto.Image}") />
    </div>

    <MudPaper Class="absolute px-12 py-8 ma-5"
              Style="background: var(--mud-palette-primary);
                    color: var(--mud-palette-primary-text);
                    right: 0;
                    bottom: 0;">
        <MudText><b>X</b> @($"{dto.PositionX:0.00###}") <b>Y</b> @($"{dto.PositionX:0.00###}")</MudText>
        <MudText><b>Zoom</b> @($"{dto.Zoom:0.0}")</MudText>
        @*<MudText><b>Precision</b> @dto.Precision</MudText>
        <MudText><b>Max Iterations</b> @dto.MaxIterations</MudText>*@
    </MudPaper>
}

@code {
    [Inject] ApiClient apiClient { get; set; }
    [Inject] UpdateClient updateClient { get; set; }

    private ImageDto dto;
    private bool firstReceived = true;

    protected override async Task OnInitializedAsync()
    {
        updateClient.OnImageReceived += async (dto) =>
        {
            Console.WriteLine($"Image received");
            this.dto = dto;
            StateHasChanged();

            if (firstReceived)
            {
                firstReceived = false;
                await apiClient.SendImageRequest();
            }
        };

        await apiClient.SendImageRequest();
    }
}